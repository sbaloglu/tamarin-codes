/*******************************************************************************************************************

This model is an adversary model for Belenios voting protocol, 
i.e. Helios with signatures as the public credentials of the voters.

In this model:

- Trustee, Voters, Registrar, Server and Voting Platform are corrupted.

- Voting phases are separated by restrictions.

- There is revoting in two options:
  
  1) with replacement of ballots on the BB. (Restriction: Ver_last)
  2) without replacement, i.e. keeping all cast ballots on the BB. (Restriction: Ver_last & Ver_mine)

- Verification is done in three ways:

  a) by checking BBcast in any time of the election.
  b) by checking BBtally in the end of election.
  c) by checking BBtally for empty ballots in the end of election.

- We only check verifiability properties.

- To obtain V_2, "restriction Ver_mine" should be uncommented:

  V_1 (1a) : IV0, EL10, CL0, RS1, RS20 with last restriction.    
  V_2 (2a) : IV0, EL10, CL0, RS1, RS20 with last and mine restrictions.    
  V_3 (b)  : IV1, EL11, CL1, RS1, RS21
  V_4 (c)  : IV2, EL12, CL2, RS1, RS22

- Execution time: ???? (without mine) 
                  - WIV0: ~4h - 256m16.940s
                  - IV0: ~5h34m - 334m18.494s (killed)
                  - CL0: 58m18.832s
                  - Rest: 12m19.987s 

                  ???? (with mine)
                  - WIV0: ~2h - 111m51.337s
                  - IV0: ~8h45m - 525m13.470s (killed)
                  - CL0: ~23h21m - 1401m33.447s (killed)
                  - Rest: 24m9.241s

- Results without mine:

  Reachability_from_BBtally_to_BBreg (exists-trace): verified (16 steps)
  Weak_Individual_Verifiability_0 (all-traces): falsified - found trace (22 steps)
  Individual_Verifiability_1 (all-traces): verified (82 steps)
  Individual_Verifiability_2 (all-traces): verified (8 steps)
  Eligibility_1_0 (all-traces): verified (50 steps)
  Eligibility_1_1 (all-traces): verified (50 steps)
  Eligibility_1_2 (all-traces): verified (6 steps)
  Eligibility_2 (all-traces): verified (10 steps)
  No_Clash_at_Verification_0 (all-traces): falsified - found trace (16 steps)
  No_Clash_at_Verification_1 (all-traces): falsified - found trace (15 steps)
  No_Clash_at_Verification_2 (all-traces): falsified - found trace (8 steps)
  Result_1 (all-traces): falsified - found trace (10 steps)
  Result_2_0 (all-traces): falsified - found trace (20 steps)
  Result_2_1 (all-traces): verified (214 steps)
  Result_2_2 (all-traces): verified (46 steps)
  Homomorphic_Tally_Property (all-traces): verified (22 steps)

- Results with mine: 

  Reachability_from_BBtally_to_BBreg (exists-trace): verified (16 steps)
  Weak_Individual_Verifiability_0 (all-traces): falsified - found trace (28 steps)
  Individual_Verifiability_1 (all-traces): verified (82 steps)
  Individual_Verifiability_2 (all-traces): verified (8 steps)
  Eligibility_1_0 (all-traces): verified (50 steps)
  Eligibility_1_1 (all-traces): verified (50 steps)
  Eligibility_1_2 (all-traces): verified (6 steps)
  Eligibility_2 (all-traces): verified (10 steps)
  No_Clash_at_Verification_1 (all-traces): falsified - found trace (15 steps)
  No_Clash_at_Verification_2 (all-traces): falsified - found trace (8 steps)
  Result_1 (all-traces): falsified - found trace (10 steps)
  Result_2_0 (all-traces): falsified - found trace (25 steps)
  Result_2_1 (all-traces): verified (214 steps)
  Result_2_2 (all-traces): verified (46 steps)
  Homomorphic_Tally_Property (all-traces): verified (22 steps)

*******************************************************************************************************************/


theory Belenios_Verifiability_A5
begin

builtins: asymmetric-encryption, hashing, signing

functions: enc/3, dec/2, proof1/3, ver1/4, proof2/3, ver2/3, ok/0

equations: dec(enc(x, pk(y), z), y) = x,
           ver1(proof1(enc(x1, y, z), z, <x1, x2>), enc(x1, y, z), y, <x1, x2>) = ok,
           ver1(proof1(enc(x2, y, z), z, <x1, x2>), enc(x2, y, z), y, <x1, x2>) = ok,
           ver2(proof2(enc(x, y, z), z, w), enc(x, y, z), w) = ok


// SETUP


rule Trustee_key: //generates election secret/public keys.
    [ Fr(~sK) ]
  --[ BB_key(pk(~sK)), OnlyOnce('key'), Phase('setup') ]->
    [ !Sk(~sK), !BBkey(pk(~sK)), Out(pk(~sK)) ]


rule Corrupted_Trustee_key: //allows adversary to choose election secret key.
    [ In(sK) ] 
  --[ BB_key(pk(sK)), OnlyOnce('key'), Phase('setup') ]-> 
    [ !Sk(sK), !BBkey(pk(sK)) ]


rule Administrator_cand: //sets up candidates.
    [ In(<x1, x2>) ] 
  --[ BB_cand(x1), BB_cand(x2), V_list(<x1, x2>), OnlyOnce('cand'), Phase('setup') ]-> 
    [ !BBcand(x1), !BBcand(x2), !Vlist(<x1, x2>) ]

   
rule Administrator_id: //sets up voters.
    [ In(id) ] --[ Phase('setup') ]-> [ !Id(id) ] 


rule Registrar_reg: //assigns a signing key and a verification key to each voter.
  let
      cr = pk(~skey)  //verification key
  in
    [ !Id(id), Fr(~skey) ] 
  --[ BB_reg(cr), OnlyOnce(<id, 'reg'>), Phase('setup') ]-> 
    [ !Reg(id, cr, ~skey), !BBreg(cr), Out(cr) ]
    

rule Corrupted_Registrar_reg: //assigns cr to id while publishing cr1 on BB. 
    [ In(<id, cr, skey, cr1>) ] 
  --[ BB_reg(cr1), OnlyOnce(<id, 'reg'>), Phase('setup') ]-> 
    [ !Reg(id, cr, skey), !BBreg(cr1) ]


rule Server_reg: //generates a random password for each voter.
    [ !Id(id), Fr(~pwd) ] 
  --[ OnlyOnce(<id, 'pwd'>), Phase('setup') ]-> 
    [ !Pwd(id, ~pwd) ]


rule Server_bb: //prepares BB before election by allocating a place for each registered voter.
    [ !BBreg(cr) ] 
  --[ BB_cast(cr, 'empty'), OnlyOnce(<cr, 'bb'>), Phase('setup') ]-> 
    [ !BBcast(cr, 'empty') ]


// VOTING


rule Corrupted_Voter_corr: //leaks credentials to the adversary.
    [ !Reg(id, cr, skey), !Pwd(id, pwd) ] 
  --[ Corr(id, cr), Phase('voting') ]-> 
    [ Out( <id, cr, skey, pwd> ) ]


rule Voting_Platform_vote: //generates a ballot, authenticates and sends it to the server.
  let 
      c = enc(v, pkey, ~r)     //ciphertext
      s = sign(c, skey)        //signature
      pr1 = proof1(c, ~r, x)   //zero-knowledge proof for validity of vote
      pr2 = proof2(c, ~r, cr)  //zero-knowledge proof for the link to cr
      b = <c, s, pr1, pr2>     //ballot
      a = h(<id, pwd, cr, b>)  //authentication by hash function
  in
    [ !BBcand(v), !BBkey(pkey), Fr(~r), !Vlist(x), !Reg(id, cr, skey), !Pwd(id, pwd) ]
  --[ Vote(id, cr, v), VoteB(id, cr, b), Phase('voting') ]->
    [ !Voted(id, cr, v, b), Out( <id, cr, b, a> ) ]


rule Corrupted_Voting_Platform_vote: //allows adversary to choose randomness, generates the ballot, authenticates and sends it to the server.
  let 
      c = enc(v, pkey, r)      //ciphertext
      s = sign(c, skey)        //signature
      pr1 = proof1(c, r, x)    //zero-knowledge proof for validity of vote
      pr2 = proof2(c, r, cr)   //zero-knowledge proof for the link to cr
      b = <c, s, pr1, pr2>     //ballot
      a = h(<id, pwd, cr, b>)  //authentication by hash function
  in
    [ !BBcand(v), !BBkey(pkey), In(r), !Vlist(x), !Reg(id, cr, skey), !Pwd(id, pwd) ]
  --[ Vote(id, cr, v), VoteB(id, cr, b), Phase('voting') ]->
    [ !Voted(id, cr, v, b), Out( <id, cr, b, a> ) ]


rule Server_cast: //authenticates the voter and verifies validity of the vote, if verified, publishes the ballot on BB.
  let
      b = <c, s, pr1, pr2>
      a1 = h(<id, pwd, cr, b>)
  in
    [ In( <id, cr, b, a> ), !BBkey(pkey), !Vlist(x), !BBreg(cr), !Pwd(id, pwd) ]
  --[ Eq(a, a1), Eq(verify(s, c, cr), true), Eq(ver1(pr1, c, pkey, x), ok), 
      Eq(ver2(pr2, c, cr), ok), Log(id, cr), VScast(id, b), BB_cast(cr, b), Phase('voting') ]->
    [ !BBcast(cr, b) ]


restriction Server_log: //checks logs to ensure consistency.
"
  All id cr #i. Log(id, cr) @ i ==> not(Ex cr1 #j. Log(id, cr1) @j & not(cr = cr1))  
  & not(Ex id1 #j. Log(id1, cr) @j & not(id = id1)) 
"

rule Corrupted_Server_cast: //allows adversary to stuff any ballot to BB.
  let
      b = <c, s, pr1, pr2>
  in
    [ In(<cr, b>), !BBreg(cr) ] 
  --[ Eq(verify(s, c, cr), true), Eq(ver2(pr2, c, cr), ok), BB_cast(cr, b), Phase('voting') ]-> 
    [ !BBcast(cr, b) ]


restriction Server_Election_Auditors_cast: //ballot validity checks
"
  All cr b #i. BB_cast(cr, b) @i ==> Ex #j. BB_reg(cr) @j & ( b = 'empty'
    | ( Ex c s pr1 pr2 pkey v r x1 x2 #k #l. BB_key(pkey) @k & V_list(<x1, x2>) @l 
        & b = <c, s, pr1, pr2> & c = enc(v, pkey, r) & (v = x1 | v = x2) ) )
"

rule Voter_ver_0: //verifies BBcast that it has her/his ballot.
    [ !Voted(id, cr, v, b), !BBcast(cr, b) ]
  --[ Verified_0(id, cr, v), VerB(id, cr, b) ]->
    [  ]


// TALLY


rule Server_tally: //selects the ballot to be tallied.
    [ !BBcast(cr, b) ]
  --[ BB_tally(cr, b), OnlyOnce(<cr, 'tally'>), Phase('tally') ]->
    [ !BBtally(cr, b) ]


restriction Server_Election_Auditors_tally: //selects the last ballot among all cast ballots.
"
  All cr b b1 #i #j #k. BB_cast(cr, b) @i & BB_cast(cr, b1) @j & BB_tally(cr, b) @k 
  ==> j < i | b = b1
"

rule Voter_ver_1: //verifies BBtally that it has her/his last ballot.
    [ !Voted(id, cr, v, b), !BBtally(cr, b) ]
  --[ Verified_1(id, cr, v), Phase('tally') ]->
    [  ]


rule Voter_ver_2: //verifies BBtally that there is no ballot on behalf of her/him.
    [ !Reg(id, cr, skey), !BBtally(cr, 'empty') ]
  --[ Verified_2(id, cr, 'empty'), Phase('tally') ]->
    [  ]


// RESTRICTIONS


restriction OnlyOnce:
" 
  All x #i #j. OnlyOnce(x) @i & OnlyOnce(x) @j ==> #i = #j
"
restriction Equality:
"
  All x y #i. Eq(x,y) @i ==> x = y
"
restriction Phase_Order_1:
"
  All #i #j. Phase('setup') @i & Phase('voting') @j ==> i < j
"
restriction Phase_Order_2:
"
  All #i #j. Phase('voting') @i & Phase('tally') @j ==> i < j
"
restriction Cast_order: //server accepts ballots with respect to the cast order. (Only for honest server case)
"
  All id cr b b1 #i #j #k #l. VoteB(id, cr, b) @i & VoteB(id, cr, b1) @j 
  & VScast(id, b) @k & VScast(id, b1) @l & i < j ==> k < l
"
restriction Ver_last: //among all casts, the last one on BB is verified.
"
  All id cr b b1 #i #j #k. BB_cast(cr, b) @i & BB_cast(cr, b1) @j & VerB(id, cr, b) @k 
  & i < k & j < k ==> j < i | b = b1
"
/*
restriction Ver_mine: //all ballots on BB should have been cast by the same id.  
"
  All id cr b b1 #i #j. VerB(id, cr, b) @i & BB_cast(cr, b1) @j & j < i 
  ==> Ex #k. VoteB(id, cr, b1) @k
"
*/

// LEMMAS 


lemma Reachability_from_BBtally_to_BBreg:
exists-trace
" 
  Ex cr b #i #j #k #l #m. BB_reg(cr) @i & BB_cast(cr, 'empty') @j
  & Vote('Alice', cr, 'A') @k & BB_cast(cr, b) @l & BB_tally(cr, b) @m
"


// INDIVIDUAL VERIFIABILITY


lemma Weak_Individual_Verifiability_0:
"
  All id cr v b #i #j. Verified_0(id, cr, v) @i & BB_tally(cr, b) @j 
  & ( All v1 #k1 #k2. Vote(id, cr, v) @k1 & Vote(id, cr, v1) @k2 ==> k2 < k1 | v = v1 )  
  ==> ( Ex c s pr1 pr2 pkey r #l. BB_key(pkey) @l & b = <c, s, pr1, pr2> & c = enc(v, pkey, r) )
      | ( Ex #m. Corr(id, cr) @m ) 
"

lemma Individual_Verifiability_0:
"
  All id cr v b #i #j. Verified_0(id, cr, v) @i & BB_tally(cr, b) @j
  & ( All v1 #k1 #k2. Vote(id, cr, v) @k1 & Vote(id, cr, v1) @k2 ==> k2 < k1 | v = v1 ) 
  ==> ( Ex c s pr1 pr2 pkey r #l. BB_key(pkey) @l & b = <c, s, pr1, pr2> & c = enc(v, pkey, r) ) 
"

lemma Individual_Verifiability_1:
"
  All id cr v b #i #j. Verified_1(id, cr, v) @i & BB_tally(cr, b) @j 
  ==> ( Ex c s pr1 pr2 pkey r #k. BB_key(pkey) @k & b = <c, s, pr1, pr2> & c = enc(v, pkey, r) )
"

lemma Individual_Verifiability_2:
"
  All id cr b #i #j. Verified_2(id, cr, 'empty') @i & BB_tally(cr, b) @j 
  ==> b = 'empty'
"


// ELIGIBILITY


lemma Eligibility_1_0:
"
  All id cr v #i. Verified_0(id, cr, v) @i ==> Ex #j. BB_reg(cr) @j  
"

lemma Eligibility_1_1:
"
  All id cr v #i. Verified_1(id, cr, v) @i ==> Ex #j. BB_reg(cr) @j  
"

lemma Eligibility_1_2:
"
  All id cr #i. Verified_2(id, cr, 'empty') @i ==> Ex #j. BB_reg(cr) @j  
"

lemma Eligibility_2:
"
  All cr b #i. BB_tally(cr, b) @i ==> Ex #j. BB_reg(cr) @j  
"


// CLASH 


lemma No_Clash_at_Verification_0:
"
  All id1 id2 cr v1 v2 #i #j. Verified_0(id1, cr, v1) @i & Verified_0(id2, cr, v2) @j 
  ==> id1 = id2 
"

lemma No_Clash_at_Verification_1:
"
  All id1 id2 cr v1 v2 #i #j. Verified_1(id1, cr, v1) @i & Verified_1(id2, cr, v2) @j 
  ==> id1 = id2 
"

lemma No_Clash_at_Verification_2:
"
  All id1 id2 cr #i #j. Verified_2(id1, cr, 'empty') @i & Verified_2(id2, cr, 'empty') @j 
  ==> id1 = id2 
"


// RESULT 


lemma Result_1:
"
  All cr b #i. BB_tally(cr, b) @i & not(b = 'empty') 
  ==> ( Ex id c s pr1 pr2 v pkey r #j #k. BB_key(pkey) @j & Vote(id, cr, v) @k 
        & b = <c, s, pr1, pr2> & c = enc(v, pkey, r) ) 
      | ( Ex id #j. Corr(id, cr) @j )  
"

lemma Result_2_0:
"
  All cr b #i. BB_tally(cr, b) @i & not(b = 'empty') 
  ==> ( Ex id c s pr1 pr2 v pkey r #j #k. BB_key(pkey) @j & Vote(id, cr, v) @k 
        & b = <c, s, pr1, pr2> & c = enc(v, pkey, r) ) 
      | ( Ex id #j. Corr(id, cr) @j )  
      | not( Ex id v1 #j. Verified_0(id, cr, v1) @j )
"

lemma Result_2_1:
"
  All cr b #i. BB_tally(cr, b) @i & not(b = 'empty') 
  ==> ( Ex id c s pr1 pr2 v pkey r #j #k. BB_key(pkey) @j & Vote(id, cr, v) @k 
        & b = <c, s, pr1, pr2> & c = enc(v, pkey, r) ) 
      | ( Ex id #j. Corr(id, cr) @j )  
      | not( Ex id v1 #j. Verified_1(id, cr, v1) @j )
"

lemma Result_2_2:
"
  All cr b #i. BB_tally(cr, b) @i & not(b = 'empty') 
  ==> ( Ex id c s pr1 pr2 v pkey r #j #k. BB_key(pkey) @j & Vote(id, cr, v) @k 
        & b = <c, s, pr1, pr2> & c = enc(v, pkey, r) ) 
      | ( Ex id #j. Corr(id, cr) @j )  
      | not( Ex id #j. Verified_2(id, cr, 'empty') @j )
"


// HOMOMORPHIC TALLY PROPERTY 


lemma Homomorphic_Tally_Property:
"
  All cr b #i. BB_tally(cr, b) @i & not(b = 'empty')
  ==> Ex c s pr1 pr2 v pkey r #j. BB_cand(v) @j & b = <c, s, pr1, pr2> & c = enc(v, pkey, r)   
"

end