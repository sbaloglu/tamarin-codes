/*******************************************************************************************************************

This model is an adversary model for Belenios-tr voting protocol.

In this model:

- Trustee and Voters are corrupted. 
  Registrar, Voting Platform and Server are honest.

- Voting phases are separated by restrictions.

- Revoting is allowed and last cast ballot is tallied.

- Verification is done by checking BBcast anytime during the election.

- Verifiability properties are checked.

+ Ballot structure inherits the former ballot in zero-knowledge proof.

- Only two ballot casts are allowed by Server.

- Execution time: 0m13.082s
                  
- Results:

  Weak_Individual_Verifiability (all-traces): verified (68 steps)
  Eligibility_1 (all-traces): verified (6 steps)
  Eligibility_2 (all-traces): verified (4 steps)
  No_Clash_at_Verification (all-traces): verified (38 steps)
  Result_1 (all-traces): verified (18 steps)
  Result_2 (all-traces): verified (48 steps)

*******************************************************************************************************************/


theory Belenios_tr_Verifiability_A1_2b
begin
 
builtins: asymmetric-encryption, hashing, signing

functions: enc/3, dec/2, proofR/3, verR/4, proofL/3, verL/3, ok/0

equations: dec(enc(x, pk(y), z), y) = x,
           verR(proofR(enc(x1, y, z), z, <x1, x2>), enc(x1, y, z), y, <x1, x2>) = ok,
           verR(proofR(enc(x2, y, z), z, <x1, x2>), enc(x2, y, z), y, <x1, x2>) = ok,
           verL(proofL(enc(x, y, z), z, l), enc(x, y, z), l) = ok


// SETUP


rule Corrupted_Trustee_key: //allows adversary to choose election secret key.
    [ In(kT) ] 
  --[ BB_key(pk(kT)), OnlyOnce('T'), Phase('setup') ]-> 
    [ !Sk(kT), !BBkey(pk(kT)) ]


rule Administrator_cand: //sets up candidates.
    [ In(<x1, x2>) ] 
  --[ V_list(<x1, x2>), OnlyOnce('Cand'), Phase('setup') ]-> 
    [ !Vlist(<x1, x2>), !BBcand(x1), !BBcand(x2) ]


rule Administrator_id: //sets up voters.
    [ In(id) ] --[ Phase('setup') ]-> [ !Id(id) ] 


rule Registrar_reg: //assigns a signing key and a verification key to each voter.
  let
      cr = pk(~skey) //verification key
  in
    [ !Id(id), Fr(~skey) ] 
  --[ BB_reg(cr), OnlyOnce(<id, 'reg'>), Phase('setup') ]-> 
    [ !Reg(id, cr, ~skey), !BBreg(cr), Out(cr) ]


rule Server_reg: //generates a random password for each voter.
    [ !Id(id), Fr(~pwd) ] 
  --[ OnlyOnce(<id, 'pwd'>), Phase('setup') ]-> 
    [ !Pwd(id, ~pwd) ]


rule Server_bb: //prepares BB before election by allocating a place for each registered voter.
    [ !BBreg(cr) ] 
  --[ BB_cast(cr, 'empty'), OnlyOnce(<cr, 'bb'>), Phase('setup') ]-> 
    [ !BBcast(cr, 'empty'), BBlast(cr, 'empty'), VPlast(cr, 'empty') ]


// VOTING


rule Corrupted_Voter_corr: //leaks credentials to the adversary.
    [ !Reg(id, cr, skey), !Pwd(id, pwd) ] 
  --[ Corr(id, cr), Phase('voting') ]-> 
    [ Out( <id, cr, skey, pwd> ) ]


rule Voting_Platform_vote: //generates a ballot, authenticates and sends it to the server.
  let 
      c = enc(v, pkey, ~r)      //ciphertext
      s = sign(c, skey)         //signature
      l = <h(cr, b0)>           //label for the link to cr and former ballot
      prR = proofR(c, ~r, x)    //zero-knowledge proof for the range
      prL = proofL(c, ~r, l)    //zero-knowledge proof for the label
      b = <c, s, prR, prL, l>   //ballot
      a = h(<id, pwd, cr, b>)   //authentication by hash function
  in
    [ !BBcand(v), !BBkey(pkey), Fr(~r), !Vlist(x), !Reg(id, cr, skey), !Pwd(id, pwd), VPlast(cr, b0) ]
  --[ Vote(id, cr, v), VoteB(id, cr, b), Phase('voting') ]->
    [ Out( <id, cr, b, a> ), !Voted(id, cr, v, b) ]


rule Server_cast: //authenticates the voter and verifies the ballot, if verified, publishes the ballot on BB.
  let 
      l = <h(cr, b0)>
      b = <c, s, prR, prL, l>
      a1 = h(<id, pwd, cr, b>)  
  in
    [ In( <id, cr, b, a> ), !BBkey(pkey), !Vlist(x), !BBreg(cr), !Pwd(id, pwd), BBlast(cr, b0) ]
  --[ Eq(a, a1), Eq(verify(s, c, cr), true), Eq(verR(prR, c, pkey, x), ok), Eq(verL(prL, c, l), ok), 
      Log(id, cr), BB_cast(cr, b), TwoTimes(<cr, 'cast'>), Phase('voting') ]->
    [ !BBcast(cr, b), BBlast(cr, b), VPlast(cr, b) ]


restriction Server_log: //checks logs to ensure consistency.
"
  All id cr #i. Log(id, cr) @ i ==> not(Ex cr1 #j. Log(id, cr1) @j & not(cr = cr1))  
  & not(Ex id1 #j. Log(id1, cr) @j & not(id = id1)) 
"

restriction Server_Election_Auditors_cast: //ballot validity checks
"
  All cr b #i. BB_cast(cr, b) @i ==> Ex #j. BB_reg(cr) @j & ( b = 'empty'
    | ( Ex c s prR prL l pkey v r x1 x2 #k #l. BB_key(pkey) @k & V_list(<x1, x2>) @l 
        & b = <c, s, prR, prL, l> & c = enc(v, pkey, r) & (v = x1 | v = x2) ) )
"

rule Voter_ver: //verifies BBcast that it has her/his ballot.
    [ !Voted(id, cr, v, b), !BBcast(cr, b) ]
  --[ Verified(id, cr, v), VerB(id, cr, b) ]->
    [  ]


// TALLY


rule Server_tally: //selects the ballot to be tallied.
    [ !BBcast(cr, b) ]
  --[ BB_tally(cr, b), OnlyOnce(<cr, 'T'>), Phase('tally') ]->
    [ !BBtally(cr, b) ]


restriction Server_Election_Auditors_tally: //selects the last ballot among all cast ballots.
"
  All cr b b1 #i #j #k. BB_cast(cr, b) @i & BB_cast(cr, b1) @j & BB_tally(cr, b) @k 
  ==> j < i | b = b1
"


// RESTRICTIONS


restriction OnlyOnce:
" 
  All x #i #j. OnlyOnce(x) @i & OnlyOnce(x) @j ==> #i = #j
"
restriction TwoTimes:
" 
  All x #i #j #k. TwoTimes(x) @i & TwoTimes(x) @j & TwoTimes(x) @k 
  ==> #i = #j | #i = #k | #j = #k
"
restriction Equality:
"
  All x y #i. Eq(x,y) @i ==> x = y
"
restriction Phase_Order_1:
"
  All #i #j. Phase('setup') @i & Phase('voting') @j ==> i < j
"
restriction Phase_Order_2:
"
  All #i #j. Phase('voting') @i & Phase('tally') @j ==> i < j
"
restriction Verified_last: //among all casts, the last one on BB is verified.
"
  All id cr b b1 #i #j #k. BB_cast(cr, b) @i & BB_cast(cr, b1) @j & VerB(id, cr, b) @k 
  & i < k & j < k ==> j < i | b = b1
"


// LEMMAS 

/*
lemma Reachability_from_BBtally_to_BBreg:
exists-trace
" 
  Ex cr b #i #j #k #l #m. BB_reg(cr) @i & BB_cast(cr, 'empty') @j
  & Vote('Alice', cr, 'A') @k & BB_cast(cr, b) @l & BB_tally(cr, b) @m
"
*/
// INDIVIDUAL VERIFIABILITY

lemma Weak_Individual_Verifiability:
"
  All id cr v b #i #j. Verified(id, cr, v) @i & BB_tally(cr, b) @j 
  & ( All v1 #l1 #l2. Vote(id, cr, v) @l1 & Vote(id, cr, v1) @l2 ==> l2 < l1 | v = v1 )  
  ==> ( Ex c s prR prL l pkey r #k. BB_key(pkey) @k & b = <c, s, prR, prL, l> & c = enc(v, pkey, r) )
      | ( Ex #l. Corr(id, cr) @l ) 
"

// ELIGIBILITY

lemma Eligibility_1:
"
  All id cr v #i. Verified(id, cr, v) @i ==> Ex #j. BB_reg(cr) @j  
"

lemma Eligibility_2:
"
  All cr b #i. BB_tally(cr, b) @i ==> Ex #j. BB_reg(cr) @j  
"

// CLASH 

lemma No_Clash_at_Verification:
"
  All id1 id2 cr v1 v2 #i #j. Verified(id1, cr, v1) @i & Verified(id2, cr, v2) @j 
  ==> id1 = id2 
"

// RESULT 

lemma Result_1:
"
  All cr b #i. BB_tally(cr, b) @i & not(b = 'empty') 
  ==> ( Ex id c s prR prL l v pkey r #j #k. BB_key(pkey) @j & Vote(id, cr, v) @k 
        & b = <c, s, prR, prL, l> & c = enc(v, pkey, r) ) 
      | ( Ex id #j. Corr(id, cr) @j )  
"

lemma Result_2:
"
  All cr b #i. BB_tally(cr, b) @i & not(b = 'empty') 
  ==> ( Ex id c s prR prL l v pkey r #j #k. BB_key(pkey) @j & Vote(id, cr, v) @k 
        & b = <c, s, prR, prL, l> & c = enc(v, pkey, r) ) 
      | ( Ex id #j. Corr(id, cr) @j )  
      | not( Ex id v1 #j. Verified(id, cr, v1) @j )
"

end